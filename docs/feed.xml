<rss version="2.0">
<channel>
<title>Alex Drysdale</title>
<description>Blog posts by Alex Drysdale</description>
<link>https://abdrysdale.phd</link>
<item>
<title>About Me</title>
<link>https://abdrysdale.phd/about.html</link>
<pubDate>Sat, 19 Apr 2025 00:00:01 GMT</pubDate>
<description><![CDATA[#+title: About Me
#+author: Alex Drysdale
#+date: <2025-04-19>
#+export_date: Sat, 19 Apr 2025 00:00:01 GMT

I'm currently a trainee Magnetic Resonance Physicist for NHS Wales working with =Python=, =Elisp=, =SQL= and big magnets.

Outwith employment, I dabble in many programming languages - mainly =Forth=, =Common Lisp=, =R=, =Fortran= and =Perl=.

In addition to turning coffee into bugs, I read a lot and bake bread.

* Education

- Physics BSc :: University of Glasgow -First Class Honours
- PhD (candidate) :: Swansea University - Deep Residual Graph Convolutional Neural Networks for Real Time Uncertainty Quantification of 1D Haemodynamic Vessel System Metrics

* Papers

- [[https://doi.org/10.48550/arXiv.2411.09046][A new computational model for quantifying blood flow dynamics across myogenically-active cerebral arterial networks - A Coccarelli, I Polydoros, A Drysdale, OF Harraz, C Kadapa]]
- [[https://doi.org/10.1038/s41598-024-72832-y][Development of non-invasive biomarkers for pre-eclampsia through data-driven cardiovascular network models - Claudia Popp, Jason M Carson, Alex B Drysdale, Hari Arora, Edward D Johnstone, Jenny E Myers, Raoul van Loon]]

* Conferences

- UK Association for Computational Mechanics, 2022 :: Neural Network Solvers from Synthetically Generated Data
- BioMedEng, 2022 :: Physics Informed 1D Haemodynamic Neural Network Solvers
- European Society of Mechanical Engineering, 2023 :: Deep Residual Ambivalent Graph-convolutional Neural Networks (DRAGNN) for Biomarker Prediction in Large Vessel Networks
- BioMedEng, 2023 :: Machine Learning for Large Vessel Networks

]]></description>
</item>
<item>
<title>Current Build Process For This Site</title>
<link>https://abdrysdale.phd/colophon.html</link>
<pubDate>Sat, 19 Apr 2025 00:00:01 GMT</pubDate>
<description><![CDATA[#+TITLE: Current Build Process For This Site
#+AUTHOR: Alex Drysdale
#+DATE: <2025-04-19 Sat>
#+EXPORT_DATE: Sat, 19 Apr 2025 00:00:01 GMT

#+PROPERTY: header-args:elisp :tangle "build.el"
#+FILETAGS: :emacs:

This website is built with =org-mode= and hosted through GitHub pages.

GitHub pages expects only a single =index.html= file and builds the site the from the =docs= directory - making the build process extremely simple.

Naturally, as this site is purely static there's no user tracking or even a requirement for =https=!

* Build output

The build output will reside in =docs= to start we'll delete that directory and copy over the css files (that reside in =resources/= and tell GitHub that this isn't a Jekyll site.

#+begin_src elisp :results none
  ;; Delete the docs directory
  (when (file-exists-p "docs")
    (delete-directory "docs" t))

  ;; Delete tag files
  (dolist (file (directory-files "src" nil "^tags-.*\\.org$"))
    (when (file-regular-p (expand-file-name file "src"))
      (delete-file (expand-file-name file "src"))))

  ;; Copy resources to the docs directory
  (make-directory "docs" t)
  (copy-directory "src/resources" "docs/resources" t t)

  ;; Tell github this isn't a Jekyll cite and insert the CNAME
  (with-temp-file (expand-file-name "docs/.nojekyll"))
  (with-temp-file (expand-file-name "docs/CNAME")
    (insert "abdrysdale.phd"))
#+end_src


* Installing required packages

We'll need to use an elisp package (=htmlize=) for the build process. The build process will work fine on my machine but I'll need this bit for continuous integration.

#+begin_src elisp :results none
  ;; Initialize package system
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (unless package--initialized (package-initialize))

  (unless (package-installed-p 'htmlize)
    (package-refresh-contents)
    (package-install 'htmlize))
#+end_src

* Building the Home Page

The first thing I want on the home page is a list of articles with the article title as the description.
I'd also like a list of tags that are used on the articles so the user can search by topic - topics are stored in the =FILETAGS= property.
To do this, I create a cons list of =(title . path)= of each article in the =src/= directory that isn't =index.org=.

First things first, let's define a generic function for extracting properties from an org-mode document.
#+begin_src elisp :results none
  (defun get-org-property (prop file)
    "Extract PROP from the org FILE."
    (when (file-exists-p file)
      (with-temp-buffer
        (insert-file-contents file)
        ;; No need for error handling here as (cdr nil) and (car nil) return nil
        (car (cdr (car (org-collect-keywords `(,prop))))))))
#+end_src

Next we define a function that returns all of the articles in format =(file . link-title)=.

#+begin_src elisp :results none
  (defun get-titles-from-org-files (directory)
    "Extract titles and dates from org files in DIRECTORY."
    (let ((files (directory-files directory t "^[[:alnum:]-_]+.org$")))
      (mapcar (lambda (file)
                (let ((rel-file (file-relative-name
                                 file (expand-file-name directory))))
                  `(,rel-file . ,(list
                                  (get-org-property "TITLE" file)
                                  (get-org-property "DATE" file)
                                  (get-org-property "FILETAGS" file)))))
              files)))
#+end_src

Next the home page (=index.org=) is built. Currently this is really simple and just includes a template followed by a list of all of the articles and then a list of all the tags.

We'll take this template:
#+begin_src org :tangle index-template.org :eval no
  I'm Alex, a PhD candidate (haemodynamics + graph convolutional neural networks) and a trainee magnetic resonance physicist for NHS Wales.
  Thank you for visiting my little patch of the internet.
  All views are my own and not that of my employer.

  You can expect content on programming, Emacs, philosophy, ethics, magnets and bread.
  In addition to this, I'll try to post explanations of papers that I publish. If I'm not the first author I'll do my best to explain the paper or, more likely, explain my contribution to paper.

  /This is site is intentially minimal and left as an exercise to the reader.../

  ,* Copying

  All material is in the website licensed under the the GNU/GPLv3 license - 
  which can be found [[https://github.com/abdrysdale/abdrysdale.github.io/blob/main/LICENSE][here]].
#+end_src

insert a title and then add the articles and tags.

#+RESULTS:

#+begin_src elisp :results none
  (defun build-index (author)
    "Build the index for the AUTHOR."
    ;; Copies the README.org to the index.
    (let ((dir "src")
          (index "src/index.org")
          (ignore-files '("index.org"
                          "about.org"
                          "sitemap.org"
                          "index-template.org"))
          (used-tags nil)
          (articles nil))

      ;; Inserts title and template
      (with-current-buffer (find-file-noselect index)
        (erase-buffer)
        (insert (format "#+title: %s\n\n" author))
        (insert-file-contents "../index-template.org")
        (end-of-buffer)
        (insert "\n\n* Articles\n")
        (save-buffer))

      ;; Gets all of the articles
      (dolist (result (get-titles-from-org-files dir))
        (let ((path (car result))
              (info (cdr result)))
          (unless (member path ignore-files)
            (push `(,path ,(car info) ,(cadr info) ,(caddr info)) articles))))

      ;; Sort articles by date
      (setq articles (sort articles (lambda (a b)
                                (let ((date-a (caddr a))
                                      (date-b (caddr b)))
                                  (string> (substring date-a 1 -1)
                                           (substring date-b 1 -1))))))

      ;; Insert links to articles in the index and tag files
      (dolist (article articles)
        (let ((path (car article))
              (title (cadr article))
              (date (caddr article))
              (tags (cadddr article)))
          (with-current-buffer (find-file-noselect index)
            (goto-char (point-max))
            (let ((link (format
                         "- [[file:%s][%s]] %s\t%s\n"
                         path
                         title
                         date
                         (replace-regexp-in-string ":" "/" tags))))
              (insert link)
              (save-buffer)

              ;; Insert a link to article in each of the tags file.
              (dolist (tag (split-string tags ":"))
                (unless (string-empty-p tag)
                  (let* ((tag-file (concat "tags-" tag ".org"))
                         (tag-entry `(,tag . ,tag-file)))
                    (unless (member tag-entry used-tags)
                      (push tag-entry used-tags))
                    (with-current-buffer (find-file-noselect tag-file)
                      (unless (file-exists-p tag-file)
                        (erase-buffer)
                        (insert (format "#+title:%s\n\n" tag)))
                      (goto-char (point-max))
                      (insert link)
                      (save-buffer)))))))))

            ;; Insert a link to the tag files in the index
            (with-current-buffer (find-file-noselect index)
              (insert "\n* Tags\n\n")
              (dolist (tag-info used-tags)
                (let ((tag (car tag-info))
                      (file (cdr tag-info)))
                  (insert (format "- [[file:%s][%s]]\n" file tag))))
              (save-buffer))))
#+end_src

* Add an RSS feed

#+begin_src elisp
(defun get-string-from-file (filePath)
  "Return file content as string."
  (with-temp-buffer
    (insert-file-contents filePath)
    (buffer-string)))
;; 2010-09-02 thanks to Pascal J Bourguignon and TheFlyingDutchman
#+end_src

#+begin_src elisp
  (defun get-rss-feed-item (title link date &optional desc)
    "Return an rss feed item with TITLE, LINK, DATE and DESCRIPTION."
    (concat
     "<item>\n"
     "<title>" title "</title>\n"
     "<link>" link "</link>\n"
     "<pubDate>" date "</pubDate>\n"
     "<description><![CDATA[" (if desc desc "") "]]></description>\n"
     "</item>\n"))
#+end_src

#+RESULTS:
: get-rss-feed-item

#+begin_src elisp
  (defun build-rss-feed (title link desc src out)
    "Build a rss feed for TITLE (DESC) at LINK using the posts in SRC to OUT."
    (with-current-buffer (find-file-noselect (concat out "feed.xml"))
      (erase-buffer)
      (insert (concat
               "<rss version=\"2.0\">\n"
               "<channel>\n"
               "<title>" title "</title>\n"
               "<description>" desc "</description>\n"
               "<link>" link "</link>\n"))
      (dolist (file (directory-files src nil "^[[:alnum:]-_]+.org$"))
        (let ((date (get-org-property "EXPORT_DATE" (concat src "/" file))))
          (insert (get-rss-feed-item (get-org-property "TITLE"
                                                       (concat src "/" file))
                                     (concat link "/"
                                             (car (split-string file ".org"))
                                             ".html")
                                     date
                                     (get-string-from-file
                                      (concat src "/" file))))))
      (insert "</channel>\n</rss>")
      (save-buffer)))
#+end_src

#+RESULTS:
: build-rss-feed

* Publishing the Site

Finally, the site is published using =ox-publish= with this article (the =README.org=) being copied as an article.

One thing of note is that we always publish the articles under the same theme for continuity.

#+begin_src elisp
  (require 'ox-publish)
  (require 'whitespace)
  (require 'htmlize)
  (let ((current-theme (if custom-enabled-themes
                           (car custom-enabled-themes)
                         'modus-operandi))
        (publish-theme 'modus-operandi)
        (whitespace-style nil)
        (whitespace-mode 0)
        (org-html-validation-link nil)
        (org-html-head-include-scripts nil)
        (org-html-head-include-default-style nil)
        (org-html-head (concat
                        "<link rel=\"stylesheet\""
                        "href=\"resources/org.css\""
                        "type=\"text/css\" />"
                        "<header>"
                        "<a href=\"index.html\">Home</a>"
                        "&emsp;<a href=\"about.html\">About Me</a>"
                        "&emsp;<a href=\"https://github.com/abdrysdale/abdrysdale.github.io\">Source</a>"
                        "&emsp;<a href=\"sitemap.html\">Sitemap</a>"
                        "&emsp;<a href=\"feed.xml\">RSS</a>"
                        "</header>\n"))
        (org-src-fontify-natively t)
        (org-publish-project-alist
         '(("blog"
            :base-directory "src"
            :recursive nil
            :publishing-directory "docs"
            :auto-sitemap t
            :with-author nil
            :with-creator t
            :with-toc t
            :headline-levels 1
            :section-numbers nil
            :time-stamp-file nil
            :publishing-function org-html-publish-to-html))))
    (copy-file "README.org" "src/colophon.org" t)
    (build-index "Alex Drysdale")
    (build-rss-feed
     "Alex Drysdale"
     "https://abdrysdale.phd"
     "Blog posts by Alex Drysdale"
     "../src/" "docs/")
    (load-theme publish-theme)
    (org-publish-all t)
    (load-theme current-theme)
    (message "Site built at %s"
             (format-time-string "%Y-%m-%d %H:%M:%S")))
#+end_src

#+RESULTS:
: Site built at 2025-06-17 19:28:31


* Git Hooks

This script is tangled into =.git/hooks/build.el= which means that we just need to create a =pre-commit= hook that runs the =build.el= file.

#+begin_src bash :results none :tangle ".git/hooks/pre-commit" :eval no
  #!/bin/sh
  emacs --batch -Q --script build.el
  git add docs/*.html
#+end_src

and make that file executable:
#+begin_src bash :tangle no :results none
  chmod +x .git/hooks/pre-commit
#+end_src


* Conclusion

Not the most beautiful blog, or the most elegant build solution but this allows me to just write without thinking about much each.

There's still a few things I'd like to implement in the build process namely:

** DONE Include the date in the article link title and sort by date - /newest first/.
- State "DONE"       from "TODO"       [2025-06-17 Tue 19:28]
At this stage of the site, with the number of posts in the single digits, it's not essential.
** TODO Have each blog have a link to the tags file of the associated =FILETAGS= in that blog.
Similar to above, this will need to be sorted when more posts come into existence.
** TODO Include the following [[https://slashpages.net/][slashpages]] in the index
*** TODO [[https://blogroll.org/][blogroll]]
A list of blogs that I follow.
*** TODO [[https://bukmark.club/directory/][links]]
Similar to blogroll but for specific posts.
*** TODO [[https://indieweb.org/release_notes][changelog]]
*** TODO [[https://indieweb.org/contact][contact]]
*** TODO [[https://thechels.uk/green][green]]
Include some tangible targets and current status/metrics.
*** TODO [[https://chrisburnell.com/note/slash-interests/][interests]]
Nice way to express the things I'm interested in.
*** TODO [[https://www.miriamsuzanne.com/why][why]]
*** DONE [[https://aboutideasnow.com/][ideas]]
- State "DONE"       from "TODO"       [2025-06-17 Tue 22:11]
A list of the half-baked ideas I have.
*** TODO [[https://rknight.me/next][next]] or [[https://fyr.io/yep][yep]]
The better ideas should hopefully go here after I've given some thought and deemed them worth my time.
*** TODO [[https://baty.net/nope][nope]]
The not so good ideas will go here to remind myself not to keep thinking about them.
** TODO Include a link a page on projects that I've developed
]]></description>
</item>
<item>
<title>Ideas</title>
<link>https://abdrysdale.phd/ideas.html</link>
<pubDate>Tue, 17 Jun 2025 00:00:01 GMT</pubDate>
<description><![CDATA[#+title: Ideas
#+author: Alex Drysdale
#+date: <2025-06-17>
#+export_date: Tue, 17 Jun 2025 00:00:01 GMT
#+filetags: :slashpages:

This is an [[https://aboutideasnow.com/][ideas]] page for all of my half-baked and overly ambitious ideas.

- Write an epic fantasy series from the ground up (physical laws -> geology -> biology -> sociology -> politics -> story).
- Build a robot arm that I can play over the board chess with that is capable of adapting to different play styles.
- Build a bass guitar compressor pedal.
- Create a program that can calculate magnetic translational forces and torque experience by an object from a CT or X-ray image.
- A Python testing library based of [[https://the-nerve-blog.ghost.io/to-be-a-better-programmer-write-little-proofs-in-your-head/][Mathew Prast's blog post - To be a better programmer write little proofs in your head]] that implements a mathematical proof style test suite written in pure Python with the idea that code can only pass if the following conditions are met:
    - *Monotonicity*: Design systems where processes (e.g., checkpoints, logs) progress unidirectionally to simplify reasoning.  
    - *Invariants/Preconditions/Postconditions*: Explicitly define constraints to ensure correctness and guide testing.  
    - *Isolation*: Use "firewalls" (e.g., component boundaries) to contain changes and prevent unintended side effects.  
    - *Induction*: Prove recursive code correct by verifying base cases and inductive steps.  
    - *Proof-Affinity*: Write code that is inherently easy to reason about, prioritizing clarity and structure over trial-and-error debugging.  
]]></description>
</item>
<item>
<title>Alex Drysdale</title>
<link>https://abdrysdale.phd/index.html</link>
<pubDate></pubDate>
<description><![CDATA[#+title: Alex Drysdale

I'm Alex, a PhD candidate (haemodynamics + graph convolutional neural networks) and a trainee magnetic resonance physicist for NHS Wales.
Thank you for visiting my little patch of the internet.
All views are my own and not that of my employer.

You can expect content on programming, Emacs, philosophy, ethics, magnets and bread.
In addition to this, I'll try to post explanations of papers that I publish. If I'm not the first author I'll do my best to explain the paper or, more likely, explain my contribution to paper.

/This is site is intentially minimal and left as an exercise to the reader.../

* Copying

All material is in the website licensed under the the GNU/GPLv3 license - 
which can be found [[https://github.com/abdrysdale/abdrysdale.github.io/blob/main/LICENSE][here]].


* Articles
- [[file:poems.org][Poems - A Collection of Poems that have resonated with me.]] <2025-09-01 Mon>	/poetry/
- [[file:poetry_as_lossy_compression.org][Poetry is Lossy Compression of Human Emotions]] <2025-06-17>	/poetry/
- [[file:ideas.org][Ideas]] <2025-06-17>	/slashpages/
- [[file:now.org][What I'm doing now]] <2025-04-24>	/slashpages/
- [[file:uses.org][Uses]] <2025-04-22>	/slashpages/emacs/
- [[file:colophon.org][Current Build Process For This Site]] <2025-04-19 Sat>	/emacs/

* Tags

- [[file:tags-emacs.org][emacs]]
- [[file:tags-slashpages.org][slashpages]]
- [[file:tags-poetry.org][poetry]]
]]></description>
</item>
<item>
<title>What I'm doing now</title>
<link>https://abdrysdale.phd/now.html</link>
<pubDate>Thu, 24 Apr 2025 00:00:01 GMT</pubDate>
<description><![CDATA[#+title: What I'm doing now
#+author: Alex Drysdale
#+date: <2025-04-24>
#+export_date: Thu, 24 Apr 2025 00:00:01 GMT
#+filetags: :slashpages:

This is a [[https://sive.rs/now][now]] page.

Here's what I'm working on now:

- Twiddling my fingers whilst I wait for my PhD viva.
- I've been reading a lot - /I'm on track to read over 100 books this year with a few this year being over 1000 pages./
- Reading through the entirety of Python's standard library.
- But most importantly, spending time with my family.
]]></description>
</item>
<item>
<title>Poems - A Collection of Poems that have resonated with me.</title>
<link>https://abdrysdale.phd/poems.html</link>
<pubDate>Mon, 01 Sep 2025 00:00:01 GMT</pubDate>
<description><![CDATA[#+title: Poems - A Collection of Poems that have resonated with me.
#+author: Alex Drysdale
#+date: <2025-09-01 Mon>
#+export_date: Mon, 01 Sep 2025 00:00:01 GMT
#+FILETAGS: :poetry:

A collection of poems that have resonated with me on some level. Sorted by poet.

* Fletcher, John (1579-162)
** The River-God's Song

#+begin_example
Do not feat to they feet
Naked in the river sweet;
Think not leech or newt or toad
Will bite thy foot when thou hast trod;
Nor let the water rising high
As thou wad'st in make thee cry
And sob, but ever live with me,
And not a wave shall trouble thee.
#+end_example

* Thoreau, Henry David (1817-1862)
** I Was Born Upon Thy Bank, River

#+begin_example
I was born upon thy bank, river,
    My blood flows in thy stream,
And thou meanderest forever
    At the bottom of my dream
#+end_example
]]></description>
</item>
<item>
<title>Poetry is Lossy Compression of Human Emotions</title>
<link>https://abdrysdale.phd/poetry_as_lossy_compression.html</link>
<pubDate>Tue, 17 Jun 2025 00:00:01 GMT</pubDate>
<description><![CDATA[#+title: Poetry is Lossy Compression of Human Emotions
#+author: Alex Drysdale
#+date: <2025-06-17>
#+export_date: Tue, 17 Jun 2025 00:00:01 GMT
#+filetags: :poetry:

* The History of the Human Heart

I read a quote from the contemporary American poet Billy Collins:

#+begin_quote
poetry is incontestably the only history we have
of human emotion. It’s the history of the human heart.
#+end_quote

and immediately thought, how is this possible?

I know it to be true that reading poetry can stir up a wealth of emotions and a connection to another that mere prose cannot do.
But the question is, how can something as complex, ephemeral and intangible as human emotion be captured, transmitted and received by another human?

This made me think of poetry as a lossy compression algorithm [fn:1] for human emotions.
That is,

1. The poet encodes (compresses) emotions into a poem.
2. The poem is transferred to another person - via print, the web or orally.
3. When the poem is read or heard by another person, the emotions are evoked in the reader/listener (decoding/decompression).

Thus the loss can be thought of as the difference in the emotions conceived by the poet to those evoked by the reader/listener.
Hence loss occurs in (at least) 3 places:

1. The poet.
2. The format of the poem.
3. The reader/listener.

Essentially, we can deduce from this the following:
1. What makes a good poet (in the context of emotion transmission) is minimal loss in expressing their emotions as a poem.
2. What makes a good transmission (print, oral reading, etc.) is expression of the emotions in the poem is faithfully retained.
3. What makes a good reader/listener is being able to understand and feel the emotions evoked by the poem.


* Where the compression of emotions differs to the compression of files

Building on this idea, the loss introduced by each of the stages is +sometimes+ often a desired effect - unlike file compression.

If a file compression, transmission or decompression algorithm started randomly flipping bits of information, it would likely be completely unusable.
The compressed files would be decompressed into complete garbage rending them completely nonsensical.

With poetry, however, this imperfection is what makes poetry so powerful.

1. An poet leaving a healthy dose of ambiguity in a poem allows a wider pool emotions to be (unconsciously) selected by the reader/listener which likely results in evoking more personable and relocatable emotions.
2. A speaker that imparts their own emotional interpretation onto the poem adds an extra layer of complexity to the final result - potentially deepening our own (or even the poet's!) understanding of the poem.
3. Similarly to the above, an imperfect reader/listener is what makes poetry so reflective and insightful.

Which raises the question, how can we reduce the emotion loss? As a reader/listener, all you have control of is the decompression algorithm.

* How to reduce decoding loss?

From this we can say that understanding more about the poet's life, the historical/social/political context of poem and understanding the reasoning behind the poetic techniques used allows us more accurately decode the poet's original emotions when writing the poem.

But that's only really a requirement when the poem evokes no emotional response - other than confusion.
In those instances, you (the reader/listener) lack the abilities to decode this poem into your own emotions - this could equally be a fault in the poet or the transmission.
In this instance, the lossy aspect of the emotional encoding/decoding is more akin to file transmission.

To take it back to file compression, a compression algorithm maps from the space all files to a latent space of compressed files.
The decompression algorithm, naturally, maps from this latent space of compressed files to the space of all files.
Taking a compressed file and randomly flipping bits is akin to moving the compressed file to a different point in the latent space.
The decompression is likely to not end up being a usable file as only a small subset of all files are "usable" files.

With poetry, there is really no equivalent of a "usable" subset of human emotion.
Even the feeling of confusion could be what the poet intended.
All that is improved upon when becoming a "better" reader of poetry is a more faithful reconstruction of the poet’s emotions, but crucially, enjoyment does not require it.
Even if a poem or poet doesn't "speak to you" (encode their emotions into a poem that is meaningfully decoded by yourself) then there are plenty of others that will be meaningful.

* Is poetry a history of human emotions?

Collins’ claim begins to make sense when we see poems as time capsules of compressed feeling.
A medieval lament, a war-time sonnet, a protest haiku—all are all encoded with emotions that might today be decoded in ways their writers never imagined.
Yet this evolution isn’t a flaw; it’s proof that poetry survives by adapting.
The "loss" of original intent becomes a bridge to new meaning, connecting us not to a static past but to the raw, universal fact that /someone, somewhere, felt something deeply enough to try to preserve it/.

In this light, poetry isn’t just a history of emotion - it’s a mirror showing yourself projected into the past.
The cracks in its reflection only help us see ourselves more clearly.

* Footnotes

[fn:1] Similar to how a JPEG takes an a high resolution image and compresses it into something lower resolution but a lot smaller in file size - with minimal reduction in the perceived quality of the image. The true, original image, can never be reconstructed which is what makes JPEG compression "lossy".
 
]]></description>
</item>
<item>
<title>Sitemap for project blog</title>
<link>https://abdrysdale.phd/sitemap.html</link>
<pubDate></pubDate>
<description><![CDATA[#+TITLE: Sitemap for project blog

- [[file:about.org][About Me]]
- [[file:index.org][Alex Drysdale]]
- [[file:colophon.org][Current Build Process For This Site]]
- [[file:ideas.org][Ideas]]
- [[file:poems.org][Poems - A Collection of Poems that have resonated with me.]]
- [[file:poetry_as_lossy_compression.org][Poetry is Lossy Compression of Human Emotions]]
- [[file:uses.org][Uses]]
- [[file:now.org][What I'm doing now]]
- [[file:tags-emacs.org][emacs]]
- [[file:tags-poetry.org][poetry]]
- [[file:tags-slashpages.org][slashpages]]]]></description>
</item>
<item>
<title>emacs</title>
<link>https://abdrysdale.phd/tags-emacs.html</link>
<pubDate></pubDate>
<description><![CDATA[#+title:emacs

- [[file:uses.org][Uses]] <2025-04-22>	/slashpages/emacs/
- [[file:colophon.org][Current Build Process For This Site]] <2025-04-19 Sat>	/emacs/
]]></description>
</item>
<item>
<title>poetry</title>
<link>https://abdrysdale.phd/tags-poetry.html</link>
<pubDate></pubDate>
<description><![CDATA[#+title:poetry

- [[file:poems.org][Poems - A Collection of Poems that have resonated with me.]] <2025-09-01 Mon>	/poetry/
- [[file:poetry_as_lossy_compression.org][Poetry is Lossy Compression of Human Emotions]] <2025-06-17>	/poetry/
]]></description>
</item>
<item>
<title>slashpages</title>
<link>https://abdrysdale.phd/tags-slashpages.html</link>
<pubDate></pubDate>
<description><![CDATA[#+title:slashpages

- [[file:ideas.org][Ideas]] <2025-06-17>	/slashpages/
- [[file:now.org][What I'm doing now]] <2025-04-24>	/slashpages/
- [[file:uses.org][Uses]] <2025-04-22>	/slashpages/emacs/
]]></description>
</item>
<item>
<title>Uses</title>
<link>https://abdrysdale.phd/uses.html</link>
<pubDate>Tue, 22 Apr 2025 00:00:01 GMT</pubDate>
<description><![CDATA[#+TITLE: Uses
#+AUTHOR: Alex Drysdale
#+DATE: <2025-04-22>
#+EXPORT_DATE: Tue, 22 Apr 2025 00:00:01 GMT
#+FILETAGS: :slashpages:emacs:

This is a [[https://uses.tech/][uses]] page.


| What?                        | How?                                                     |
|------------------------------+----------------------------------------------------------|
| Boot-loader                  | GNU + Linux + Fedora [fn:1] [fn:2]                       |
| OS                           | Emacs                                                    |
| Text editor                  | Emacs [fn:3]                                             |
| To-dos                       | Emacs (org-mode)                                         |
| Browser                      | Emacs (eww), GNU IceCat                                  |
| eMail                        | Emacs (notmuch) [fn:4]                                   |
| IRC                          | Emacs (erc)                                              |
| RSS Reader                   | Emacs (newsticker)                                       |
| Writing                      | Emacs (org-mode + AUCTeX + RefTeX)                       |
| Bibliography manager         | Emacs (ebib)                                             |
| Music Player                 | Emacs (emm)                                              |
| Media Player                 | MPV                                                      |
| EBook Library                | Calibre                                                  |
| Programming languages [fn:5] | Python, R, Fortran, SQL, Perl, Elisp, Forth, Common Lisp |

* Footnotes
:PROPERTIES:
:ID:       50ab32a6-39a2-49b1-872d-20a16261b04c
:PUBDATE:  2025-09-01 Mon 13:56
:END:

[fn:1] I previously used Gentoo but switched to Fedora due a bug I was having with external monitors not appearing after hibernation. This occurred late one night whilst writing my PhD thesis and I didn't have the time or mental energy to fix this so I decided to install Fedora. The bug persisted in Fedora and I've experienced a lot more bugs and crashes. As soon as I've got some spare time I will be switching back to Gentoo - it is far the most stable distro I've tried out of Ubuntu, Fedora, Manjaro, Arch, NixOS and Gentoo.

[fn:2] Unfortunately, I also have to use Windows for work.

[fn:3] I previously used Vim for around 5 years. The scope of what I'm able to do now far exceeds what I was previously able to do with Vim. Prior to Emacs, the thought of spending days tinkering with my editor's configuration file would have seemed impossible! Emacs feels like a snug room that I've built myself with everything just so. A little retreat from the stresses of the modern world. Vim just always felt like a tool.

[fn:4] Prior to Emacs, I used thunderbird for about a decade and had no complaints!

[fn:5] Python, R and Fortran are the only ones that I can really get stuff done. SQL and Perl I use when needed but I'm phasing out Perl in favour of Python for all of scripting and automation tasks. I have the most fun with Elisp, Forth and Common Lisp.
]]></description>
</item>
</channel>
</rss>
