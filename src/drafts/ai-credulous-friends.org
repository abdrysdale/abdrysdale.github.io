#+title: My AI Credulous Friends Are All Nuts
#+author: Alex Drysdale
#+date: <2025-09-01 Mon>
#+filetags: :ai:llm:programming:data-science:

/Note, this is a rebuttal to the article [[https://fly.io/blog/youre-all-nuts/][Thomas Ptacek's piece - My AI Skeptic Friends Are All Nuts]]./ Any friends that I have are already nuts by choosing to maintain a friendship with me.

*Important Caveat:* As with the original article, I'm only discussing the implications of LLMs for software development. The ethics of AI usage in creative domains is something I feel passionate about but is out of the scope of this article.

Bona Fides: Most of my day-to-day work could be classed as data science - as applied to a national healthcare service. For my PhD, I developed novel neural network architectures from the ground up in uncharted domains. Most of my work involves using Python and SQL along with statistics in R, numerical simulations in Fortran and a lot of cobbled together stuff in Emacs Lisp.

* Level Setting

Just so we're all on the same page, both myself and the original author are referring to "agentic-LLMs" which can:

- compile code, run tests, and iterate on the results
- pull in arbitrary code from the tree, or from other trees online, into their context
 windows, 
- run standard Unix tools to navigate the tree and extract information, 
- interact with Git, 
- run existing tooling, like linters, formatters, and model checkers, and 
- make essentially arbitrary tool calls (that you set up) through MCP. 

* The Positive Case

#+begin_quote
LLMs can write a large fraction of all the tedious code you'll ever need to write. And most code on most projects is tedious.
#+end_quote

Here in lies my crucial issue with this article. That most of the code I write is tedious. Outwith testing, it's not.

If that assumption is taken as a given then I can wholeheartedly understand the author's point of view.

But, at least for me, that assumption is false. Most of the stuff I'm actually paid to do is come up with solutions rather than write boilerplate code. For trivial boilerplate code, I have an extensive set of Emacs macros.

* But you have no idea what the code is

#+begin_quote
People complain about LLM-generated code being "probabilistic".
No it isn't.
It's code.
It's not Yacc output.
It's knowable.
The LLM might be stochastic.
But the LLM doesn't matter.
What matters is whether you can make sense of the result, and whether your guardrails hold.
#+end_quote

* But Hallucination
#+begin_quote
Agents lint.
They compile and run tests.
If their LLM invents a new function signature, the agent sees the error. 
They feed it back to the LLM, which says "oh, right, I totally made that up" and then tries again.
#+end_quote

#+begin_quote
I'm sure there are still environments where hallucination matters.
But "hallucination" is the first thing developers bring up when someone suggests using LLMs, despite it being (more or less) a solved problem.
#+end_quote

* But the code is shitty, like that of a junior developer
#+begin_quote
Does an intern cost $20/month? Because that's what Cursor.ai costs.
#+end_quote
* But it's bad at rust

#+begin_quote
Fair enough!
But people select languages in part based on how well LLMs work with them, so Rust people should get on that
#+end_quote

* But the craft

#+begin_quote
I have a basic wood shop in my basement.
I could get a lot of satisfaction from building a table.
And, if that table is a workbench or a grill table, sure, I'll build it.
But if I need, like, a table?
For people to sit at?
In my office?
I buy a [...] table.
#+end_quote

* But the mediocrity
#+begin_quote
If truly mediocre code is all we ever get
from LLMs, that's still huge.
It's that much less mediocre code humans have to write.
#+end_quote
* But it'll never be AGI
#+begin_quote
Things either work or they don't, no matter what Jensen Huang has to say
about it.
#+end_quote
* But they take-rr jerbs

#+begin_quote
So does open source. We used to pay good money for databases.

We're a field premised on automating other people's jobs away.
"Productivity gains" say the economists.
You get what that means, right?
Fewer people doing the same stuff.
#+end_quote

* But the plagiarism

#+begin_quote
Meanwhile, software developers spot code fragments seemingly lifted from public
repositories on Github and lose their shit.
What about the licensing?
If you're a lawyer, I defer.
But if you're a software developer playing this card?
Cut me a little slack as I ask you to shove this concern up your ass.
No profession has demonstrated more contempt for intellectual property.
#+end_quote

* Positive Case Redux

#+begin_quote
To the consternation of many of my friends, I'm not a radical or a futurist.
I'm a statist.
I believe in the haphazard perseverance of complex systems, of institutions, of reversions to the mean.
I write Go and Python code.
#+end_quote

* But I'm tired of hearing about it
#+begin_quote
I think this is going to get clearer over the next year.
The cool kid haughtiness about "stochastic parrots" and "vibe coding" can't survive much more contact with reality.
I'm snarking about these people, but I meant what I said: they're smarter than me.
And when they get over this affectation, they're going to make coding agents profoundly more effective than they are today.
#+end_quote
